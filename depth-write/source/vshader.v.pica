; Uniforms
.fvec projection[4]

.fvec vertex

; Constants
.constf myconst(0.0, 1.0, 0.5, 0.0)

; Outputs
.out outpos position
.out outclr color

; Inputs (defined as aliases for convenience)
.alias inpos v0

.proc main

  ; r0 = inpos.xy, 0.5, 1.0
  mov r1, vertex.ww
  mul r0.xy,  inpos.xy, r1.xy
  mov r0.z,   myconst.x
  mov r0.w,   myconst.x

  ; r15 will be our weapon of choice to mirror outclr
  ; (each output component has to be written exactly one or the PICA will freeze)
  mov r15.xyz, v1.xyz
  mov r15.w, myconst.y

  ; outpos = projectionMatrix * inpos; force hardcoded z and w
  dp4 outpos.x, projection[0], r0
  dp4 outpos.y, projection[1], r0
;  dp4 outpos.z, projection[2], r0
;  dp4 outpos.w, projection[3], r0
  mov outpos.z, vertex.z
  mov outpos.w, vertex.w

  ; outcolor = (r15.xyz, 1.0)
  mov outclr, r15

  end
.end
